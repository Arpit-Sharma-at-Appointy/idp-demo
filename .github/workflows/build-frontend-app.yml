name: Build Frontend Application

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Application Name'
        required: true
        type: string
      k8s_project:
        description: 'Kubernetes Project'
        required: true
        type: string
      git_url:
        description: 'Git Repository URL'
        required: true
        type: string
      dockerfile_path:
        description: 'Dockerfile Path'
        required: true
        type: string
        default: 'Dockerfile'
      port:
        description: 'Application Port'
        required: true
        type: string
        default: '3000'

permissions:
  contents: read
  id-token: write  # Required for Google Cloud authentication

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate and Analyze Input Parameters
        id: analyze
        run: |
          echo "=== Analyzing Frontend Application Parameters ==="
          echo "App Name: ${{ github.event.inputs.app_name }}"
          echo "Kubernetes Project: ${{ github.event.inputs.k8s_project }}"
          echo "Git URL: ${{ github.event.inputs.git_url }}"
          echo "Dockerfile Path: ${{ github.event.inputs.dockerfile_path }}"
          echo "Port: ${{ github.event.inputs.port }}"
          
          # Validate app name (Kubernetes naming convention)
          if [[ ! "${{ github.event.inputs.app_name }}" =~ ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$ ]]; then
            echo "Error: App name must follow Kubernetes naming convention"
            echo "- Only lowercase letters, numbers, and hyphens"
            echo "- Cannot start or end with hyphen"
            echo "- Must be between 1-63 characters"
            exit 1
          fi
          
          # Validate k8s project name
          if [[ ! "${{ github.event.inputs.k8s_project }}" =~ ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$ ]]; then
            echo "Error: Kubernetes project name must follow naming convention"
            exit 1
          fi
          
          # Validate Git URL format
          if [[ ! "${{ github.event.inputs.git_url }}" =~ ^https://github\.com/ ]]; then
            echo "Error: Git URL must be a valid GitHub HTTPS URL"
            exit 1
          fi
          
          # Validate port range
          PORT_NUM=${{ github.event.inputs.port }}
          if ! [[ "$PORT_NUM" =~ ^[0-9]+$ ]]; then
            echo "Error: Port must be a number"
            exit 1
          fi
          
          if (( PORT_NUM < 1 || PORT_NUM > 65535 )); then
            echo "Error: Port must be between 1 and 65535"
            exit 1
          fi
          
          # Generate unique tag with build number
          IMAGE_TAG="v${{ github.run_number }}"
          IMAGE_NAME="europe-west1-docker.pkg.dev/appointy-global/common/${{ github.event.inputs.app_name }}"
          FULL_IMAGE_NAME="${IMAGE_NAME}:${IMAGE_TAG}"
          
          # Set outputs
          echo "app_name=${{ github.event.inputs.app_name }}" >> $GITHUB_OUTPUT
          echo "k8s_project=${{ github.event.inputs.k8s_project }}" >> $GITHUB_OUTPUT
          echo "git_url=${{ github.event.inputs.git_url }}" >> $GITHUB_OUTPUT
          echo "dockerfile_path=${{ github.event.inputs.dockerfile_path }}" >> $GITHUB_OUTPUT
          echo "port=${{ github.event.inputs.port }}" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "full_image_name=$FULL_IMAGE_NAME" >> $GITHUB_OUTPUT
          
          echo "✅ Validation passed"
          echo "Image will be built as: $FULL_IMAGE_NAME"

      - name: Checkout Application Source Code
        run: |
          echo "Cloning application repository..."
          
          # Check if repository is private by attempting to clone without authentication
          REPO_URL="${{ steps.analyze.outputs.git_url }}"
          
          # Try to clone without authentication first
          echo "Testing repository accessibility..."
          if git ls-remote "$REPO_URL" HEAD &>/dev/null; then
            echo "Repository is public - cloning without authentication"
            git clone "$REPO_URL" ./app-source
          else
            echo "Repository appears to be private - using PAT_TOKEN for authentication"
            
            # Convert HTTPS URL to authenticated URL
            # Extract owner and repo from URL
            REPO_PATH=$(echo "$REPO_URL" | sed 's|https://github.com/||' | sed 's|\.git$||')
            AUTH_URL="https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${REPO_PATH}.git"
            
            echo "Cloning with authentication..."
            git clone "$AUTH_URL" ./app-source
          fi
          
          cd ./app-source
          
          # Show repository info
          echo "Repository cloned successfully:"
          echo "- Repository: ${{ steps.analyze.outputs.git_url }}"
          echo "- Latest commit: $(git rev-parse --short HEAD)"
          echo "- Branch: $(git rev-parse --abbrev-ref HEAD)"
          
          # Verify Dockerfile exists
          if [ ! -f "${{ steps.analyze.outputs.dockerfile_path }}" ]; then
            echo "Error: Dockerfile not found at path: ${{ steps.analyze.outputs.dockerfile_path }}"
            echo "Available files in repository root:"
            ls -la
            exit 1
          fi
          
          echo "✅ Dockerfile found at: ${{ steps.analyze.outputs.dockerfile_path }}"

      - name: Set up Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: |
          echo "Configuring Docker for Google Artifact Registry..."
          
          # Configure Docker to use gcloud as credential helper
          gcloud auth configure-docker europe-west1-docker.pkg.dev --quiet
          
          echo "✅ Docker configured for Artifact Registry"

      - name: Build Docker Image
        run: |
          echo "Building Docker image..."
          cd ./app-source
          
          # Build the Docker image
          docker build \
            -f ${{ steps.analyze.outputs.dockerfile_path }} \
            -t ${{ steps.analyze.outputs.full_image_name }} \
            --build-arg PORT=${{ steps.analyze.outputs.port }} \
            .
          
          echo "✅ Docker image built successfully"
          echo "Image: ${{ steps.analyze.outputs.full_image_name }}"
          
          # Show image details
          docker images | grep ${{ steps.analyze.outputs.app_name }}

      - name: Push Docker Image to Artifact Registry
        run: |
          echo "Pushing Docker image to Google Artifact Registry..."
          
          docker push ${{ steps.analyze.outputs.full_image_name }}
          
          echo "✅ Docker image pushed successfully"
          echo "Image available at: ${{ steps.analyze.outputs.full_image_name }}"

      - name: Verify Image in Registry
        run: |
          echo "Verifying image in Artifact Registry..."
          
          # List images in the repository to verify push
          gcloud artifacts docker images list \
            europe-west1-docker.pkg.dev/appointy-global/common/${{ steps.analyze.outputs.app_name }} \
            --limit=5 \
            --sort-by=~CREATE_TIME
          
          echo "✅ Image verification completed"

      - name: Checkout IDP Demo Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Generate Kubernetes Configuration File
        id: k8s-config
        run: |
          echo "Creating Kubernetes configuration file..."
          
          # Create config file in current directory (after checkout)
          CONFIG_FILE="k8s-config.env"
          K8S_OUTPUT_PATH="app-of-apps/${{ steps.analyze.outputs.k8s_project }}"
          
          cat > "$CONFIG_FILE" << EOF
          # Configuration file for Kubernetes YAML generator
          # Generated automatically by Frontend Application Build workflow
          
          # Deployment configuration
          DEPLOYMENT_NAME=${{ steps.analyze.outputs.app_name }}
          IMAGE_NAME="europe-west1-docker.pkg.dev/appointy-global/common/${{ github.event.inputs.app_name }}"
          IMAGE_TAG="v${{ github.run_number }}"
          PORT=${{ steps.analyze.outputs.port }}
          NAMESPACE=${{ steps.analyze.outputs.k8s_project }}
          
          # Service configuration
          SERVICE_NAME=${{ steps.analyze.outputs.app_name }}
          
          # VirtualService configuration
          VS_NAME=${{ steps.analyze.outputs.app_name }}
          EOF
          
          echo "Generated configuration file at: $(pwd)/$CONFIG_FILE"
          cat "$CONFIG_FILE"
          
          # Set outputs for next steps
          echo "config_file=$CONFIG_FILE" >> $GITHUB_OUTPUT
          echo "k8s_output_path=$K8S_OUTPUT_PATH" >> $GITHUB_OUTPUT
          echo "branch_name=feature/deploy-${{ steps.analyze.outputs.app_name }}-${{ github.run_number }}" >> $GITHUB_OUTPUT
          
          echo "✅ Configuration file created"

      - name: Generate Kubernetes YAML Files
        run: |
          echo "Generating Kubernetes YAML files..."
          
          # Show current working directory
          echo "Current directory: $(pwd)"
          echo "Config file location: ${{ steps.k8s-config.outputs.config_file }}"
          
          # Verify config file exists
          if [ ! -f "${{ steps.k8s-config.outputs.config_file }}" ]; then
            echo "Error: Config file not found at ${{ steps.k8s-config.outputs.config_file }}"
            echo "Available files in current directory:"
            ls -la
            exit 1
          fi
          
          # Ensure the script is executable
          chmod +x scripts/generate-k8s-yamls.sh
          
          # Create output directory if it doesn't exist
          mkdir -p ${{ steps.k8s-config.outputs.k8s_output_path }}
          
          # Run the script with absolute paths
          echo "Running: ./scripts/generate-k8s-yamls.sh \"${{ steps.k8s-config.outputs.config_file }}\" \"${{ steps.k8s-config.outputs.k8s_output_path }}\""
          ./scripts/generate-k8s-yamls.sh "${{ steps.k8s-config.outputs.config_file }}" "${{ steps.k8s-config.outputs.k8s_output_path }}"
          
          echo "✅ Kubernetes YAML files generated"
          
          # Show generated files
          echo "Generated files in ${{ steps.k8s-config.outputs.k8s_output_path }}:"
          ls -la ${{ steps.k8s-config.outputs.k8s_output_path }}/

      - name: Create and Push Branch
        run: |
          # Create new branch
          git checkout -b ${{ steps.k8s-config.outputs.branch_name }}
          
          # Add generated Kubernetes files
          git add ${{ steps.k8s-config.outputs.k8s_output_path }}/
          
          # Commit changes
          git commit -m "feat: deploy frontend app ${{ steps.analyze.outputs.app_name }}

          - App name: ${{ steps.analyze.outputs.app_name }}
          - Kubernetes project: ${{ steps.analyze.outputs.k8s_project }}
          - Docker image: ${{ steps.analyze.outputs.full_image_name }}
          - Application port: ${{ steps.analyze.outputs.port }}
          - Generated by: Frontend Application Build workflow
          
          Resources updated:
          - Kubernetes manifests in ${{ steps.k8s-config.outputs.k8s_output_path }}/
          - Docker image: ${{ steps.analyze.outputs.full_image_name }}"
          
          # Push branch using PAT
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin ${{ steps.k8s-config.outputs.branch_name }}
          
          echo "✅ Branch created and pushed: ${{ steps.k8s-config.outputs.branch_name }}"

      - name: Create Pull Request with Auto-Merge
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Create PR using GitHub CLI
          PR_URL=$(gh pr create \
            --title "🚀 Deploy Frontend App: ${{ steps.analyze.outputs.app_name }}" \
            --body "## Frontend Application Deployment Summary

          This PR was automatically generated by the Frontend Application Build workflow.

          ### 📋 Application Details
          - **App Name:** \`${{ steps.analyze.outputs.app_name }}\`
          - **Kubernetes Project:** \`${{ steps.analyze.outputs.k8s_project }}\`
          - **Source Repository:** \`${{ steps.analyze.outputs.git_url }}\`
          - **Application Port:** \`${{ steps.analyze.outputs.port }}\`
          - **Built:** \`$(date -u +%Y-%m-%dT%H:%M:%SZ)\`

          ### 🐳 Docker Image
          - **Registry:** \`europe-west1-docker.pkg.dev/appointy-global/common\`
          - **Image:** \`${{ steps.analyze.outputs.app_name }}:${{ steps.analyze.outputs.image_tag }}\`
          - **Full Image:** \`${{ steps.analyze.outputs.full_image_name }}\`
          - **Build Number:** \`${{ github.run_number }}\`

          ### 📦 Kubernetes Resources
          - **Deployment:** \`${{ steps.analyze.outputs.app_name }}\`
          - **Service:** \`${{ steps.analyze.outputs.app_name }}\`
          - **VirtualService:** \`${{ steps.analyze.outputs.app_name }}\`
          - **Namespace:** \`${{ steps.analyze.outputs.k8s_project }}\`

          ### 📁 Files Updated
          - \`${{ steps.k8s-config.outputs.k8s_output_path }}/\` - Kubernetes manifests generated by script

          ### 🔄 Next Steps After Merge
          1. **ArgoCD will automatically sync** the updated manifests ✅
          2. **Verify deployment:**
             \`\`\`bash
             kubectl get deployment ${{ steps.analyze.outputs.app_name }} -n ${{ steps.analyze.outputs.k8s_project }}
             kubectl get service ${{ steps.analyze.outputs.app_name }} -n ${{ steps.analyze.outputs.k8s_project }}
             kubectl get pods -n ${{ steps.analyze.outputs.k8s_project }} -l app=${{ steps.analyze.outputs.app_name }}
             \`\`\`
          3. **Check application logs:**
             \`\`\`bash
             kubectl logs -n ${{ steps.analyze.outputs.k8s_project }} -l app=${{ steps.analyze.outputs.app_name }}
             \`\`\`
          4. **Access the application** via the configured VirtualService

          ### ⚡ Auto-Merge
          This PR will be **automatically merged** after creation for immediate deployment.

          ### 🔗 Registry Link
          [View Docker Image](https://console.cloud.google.com/artifacts/docker/appointy-global/europe-west1/common/${{ steps.analyze.outputs.app_name }})

          ---

          🤖 *Generated by Frontend Application Build Workflow • $(date -u +%Y-%m-%dT%H:%M:%SZ)*" \
            --head ${{ steps.k8s-config.outputs.branch_name }} \
            --base main)
          
          echo "✅ Pull request created: $PR_URL"
          
          # Extract PR number from URL
          PR_NUMBER=$(echo $PR_URL | sed 's/.*\/pull\///')
          echo "PR Number: $PR_NUMBER"
          
          # Try auto-merge first
          echo "Enabling auto-merge for PR #$PR_NUMBER..."
          if gh pr merge $PR_NUMBER --auto --squash; then
            echo "✅ Auto-merge enabled for PR #$PR_NUMBER"
          else
            echo "⚠️ Auto-merge failed, will try manual merge after timeout"
          fi
          
          # Wait for auto-merge or force merge after timeout
          echo "Waiting for auto-merge to complete..."
          MERGED=false
          
          for i in {1..2}; do  # Wait up to 6 minutes (30s * 12)
            # Check if PR is merged
            if gh pr view $PR_NUMBER --json state | grep -q "MERGED"; then
              echo "✅ PR #$PR_NUMBER has been merged successfully"
              MERGED=true
              break
            fi
            
            echo "⏳ Waiting for auto-merge... (attempt $i/12)"
            sleep 30
          done
          
          # If auto-merge didn't work, force merge
          if [ "$MERGED" = false ]; then
            echo "⚠️ Auto-merge timeout. Attempting manual merge..."
            
            # Try to merge manually (this bypasses most checks)
            if gh pr merge $PR_NUMBER --squash --admin; then
              echo "✅ PR #$PR_NUMBER merged manually with admin override"
            elif gh pr merge $PR_NUMBER --squash; then
              echo "✅ PR #$PR_NUMBER merged manually"
            else
              echo "❌ Failed to merge PR #$PR_NUMBER. Manual intervention required."
              echo "PR URL: $PR_URL"
            fi
          fi

#- name: Install ArgoCD CLI
#  run: |
#    echo "Installing ArgoCD CLI..."
#    curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
#    sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
#    rm argocd-linux-amd64
#    
#    # Verify installation
#    argocd version --client
#    echo "✅ ArgoCD CLI installed successfully"
#
#- name: Create ArgoCD Application
#  env:
#    ARGOCD_USER: ${{ secrets.ARGOCD_USER }}
#    ARGOCD_PASS: ${{ secrets.ARGOCD_PASS }}
#    ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
#  run: |
#    echo "Logging into ArgoCD..."
#    
#    # Login to ArgoCD (assuming ArgoCD server URL is set via environment or default)
#    # You may need to adjust the server URL based on your setup
#    ARGOCD_SERVER="${ARGOCD_SERVER:-argocd.example.com}"
#    
#    argocd login $ARGOCD_SERVER \
#      --username $ARGOCD_USER \
#      --password $ARGOCD_PASS \
#      --grpc-web \
#      --insecure
#    
#    echo "✅ Logged into ArgoCD successfully"
#    
#    
#    echo "Syncing ArgoCD Application..."
#    argocd app sync ${{ steps.analyze.outputs.k8s_project }} --grpc-web
#
#          
#          echo "✅ ArgoCD Application synced successfully"

      - name: Summary
        run: |
          echo "=== Frontend Application Build Summary ==="
          echo "✅ Application parameters validated"
          echo "✅ Source code cloned from Git repository"
          echo "✅ Google Cloud authentication configured"
          echo "✅ Docker configured for Artifact Registry"
          echo "✅ Docker image built successfully"
          echo "✅ Docker image pushed to Artifact Registry"
          echo "✅ Image verified in registry"
          echo ""
          echo "🎯 Application Details:"
          echo "   App Name: ${{ steps.analyze.outputs.app_name }}"
          echo "   Kubernetes Project: ${{ steps.analyze.outputs.k8s_project }}"
          echo "   Source Repository: ${{ steps.analyze.outputs.git_url }}"
          echo "   Dockerfile Path: ${{ steps.analyze.outputs.dockerfile_path }}"
          echo "   Application Port: ${{ steps.analyze.outputs.port }}"
          echo ""
          echo "🐳 Docker Image Details:"
          echo "   Image Name: ${{ steps.analyze.outputs.image_name }}"
          echo "   Image Tag: ${{ steps.analyze.outputs.image_tag }}"
          echo "   Full Image: ${{ steps.analyze.outputs.full_image_name }}"
          echo ""
          echo "🔗 Registry URL:"
          echo "   https://console.cloud.google.com/artifacts/docker/appointy-global/europe-west1/common/${{ steps.analyze.outputs.app_name }}"
          echo ""
          echo "🚀 Frontend application image is ready for deployment!"